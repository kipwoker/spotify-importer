name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create Release Directory
        run: mkdir -p release

      - name: Copy Binaries
        run: |
          find target/${{ matrix.target }}/release -maxdepth 1 -type f -exec cp {} release/ \;

      - name: Upload Release Asset
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-binaries
          path: release

  build-windows:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target: [x86_64-pc-windows-gnu]

    steps:
      - uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create Release Directory
        run: mkdir -p release

      - name: Copy Binaries
        run: |
          find target/${{ matrix.target }}/release -maxdepth 1 -type f -exec cp {} release/ \;

      - name: Upload Release Asset
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-binaries
          path: release

  build-macos:
    runs-on: macos-latest
    
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create Release Directory
        run: mkdir -p release

      - name: Copy Binaries
        run: |
          find target/${{ matrix.target }}/release -maxdepth 1 -type f -exec cp {} release/ \;

      - name: Upload Release Asset
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-binaries
          path: release

  release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Linux Binaries
        uses: actions/download-artifact@v3
        with:
          name: x86_64-unknown-linux-gnu-binaries
          path: ./release/x86_64-unknown-linux-gnu

      - name: Download macOS Binaries
        uses: actions/download-artifact@v3
        with:
          name: x86_64-apple-darwin-binaries
          path: ./release/x86_64-apple-darwin

      - name: Download macOS M1 Binaries
        uses: actions/download-artifact@v3
        with:
          name: aarch64-apple-darwin-binaries
          path: ./release/aarch64-apple-darwin

      - name: Download Windows Binaries
        uses: actions/download-artifact@v3
        with:
          name: x86_64-pc-windows-gnu-binaries
          path: ./release/x86_64-pc-windows-gnu

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PA_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Zip Linux Binaries
        run: zip -j ./release/linux-binaries.zip ./release/x86_64-unknown-linux-gnu/*

      - name: Upload Linux Binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PA_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/linux-binaries.zip
          asset_name: linux-binaries.zip
          asset_content_type: application/zip

      - name: Zip macOS Binaries
        run: zip -j ./release/macos-binaries.zip ./release/x86_64-apple-darwin/*

      - name: Upload macOS Binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PA_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/macos-binaries.zip
          asset_name: macos-binaries.zip
          asset_content_type: application/zip

      - name: Zip macOS M1 Binaries
        run: zip -j ./release/macos-m1-binaries.zip ./release/aarch64-apple-darwin/*

      - name: Upload macOS M1 Binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PA_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/macos-m1-binaries.zip
          asset_name: macos-m1-binaries.zip
          asset_content_type: application/zip

      - name: Zip Windows Binaries
        run: zip -j ./release/windows-binaries.zip ./release/x86_64-pc-windows-gnu/*

      - name: Upload Windows Binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PA_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/windows-binaries.zip
          asset_name: windows-binaries.zip
          asset_content_type: application/zip
